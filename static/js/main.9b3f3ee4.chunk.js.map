{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","api.ts","App.tsx","index.tsx"],"names":["TodoList","todoList","selectedId","selectTodo","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","selectSortBy","searchQuery","addSearch","clearSearch","onChange","element","target","value","placeholder","style","pointerEvents","Loader","TodoModal","user","closeModal","modalLoader","name","email","href","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","App","useState","todos","setTodos","setUser","setSelectedId","selectedTodo","setSelectedTodo","todoSortByData","setTodoSortByData","setSearchQuery","listLoader","setListLoader","setModalLoader","loadTodoList","a","loadedTodoList","loadUser","todoId","loadedUsers","todoSortedData","searchTerm","todosForSearch","todoSortBy","filter","onSort","lowerQuery","trim","toLocaleLowerCase","toLowerCase","includes","onSearch","useEffect","sortByData","searchWord","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b3f3ee4.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todoList: Todo[];\n  selectedId: number;\n  selectTodo: (todo: Todo | 0) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todoList,\n  selectedId,\n  selectTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todoList.map(todo => (\n        <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed\n              ? (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )\n              : (\n                ''\n              )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={classNames(\n                { 'has-text-danger': !todo.completed },\n                { 'has-text-success': todo.completed },\n              )}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            {todo.id === selectedId\n              ? (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    selectTodo(0);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye-slash\" />\n                  </span>\n                </button>\n              )\n              : (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    selectTodo(todo);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye\" />\n                  </span>\n                </button>\n              )}\n          </td>\n        </tr>\n      ))}\n\n    </tbody>\n  </table>\n);\n","import React from 'react';\n\ntype Props = {\n  selectSortBy: (sortByData: string) => void;\n  searchQuery: string,\n  addSearch: (searchWord: string) => void,\n  clearSearch: () => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  selectSortBy,\n  searchQuery,\n  addSearch,\n  clearSearch,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          onChange={(element) => selectSortBy(element.target.value)}\n          data-cy=\"statusSelect\"\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={searchQuery}\n        onChange={(element) => addSearch(element.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {searchQuery && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={clearSearch}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  todo: Todo;\n  user: User;\n  closeModal: () => void;\n  modalLoader: boolean,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  user,\n  closeModal,\n  modalLoader,\n}) => {\n  const { id, title, completed } = todo;\n  const { name, email } = user;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {modalLoader ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                )\n                : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n              {' by '}\n\n              <a href={`mailto:${email}`}>\n                {name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos, getUser } from './api';\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [user, setUser] = useState<User | 0>(0);\n  const [selectedId, setSelectedId] = useState(0);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | 0>(0);\n  const [todoSortByData, setTodoSortByData] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [listLoader, setListLoader] = useState(false);\n  const [modalLoader, setModalLoader] = useState(false);\n\n  const loadTodoList = async () => {\n    const loadedTodoList = await getTodos();\n\n    if (loadedTodoList) {\n      setListLoader(false);\n      setTodos(loadedTodoList);\n    }\n  };\n\n  const loadUser = async (todoId: number) => {\n    const loadedUsers = await getUser(todoId);\n\n    if (loadedUsers) {\n      setUser(loadedUsers);\n      setTimeout(() => {\n        setModalLoader(false);\n      }, 300);\n    }\n  };\n\n  const selectSortBy = (sortByData: string) => {\n    setTodoSortByData(sortByData);\n  };\n\n  const onSort = (todoSortBy: string) => {\n    switch (todoSortBy) {\n      case 'completed':\n        return todos.filter(todo => todo.completed);\n\n      case 'active':\n        return todos.filter(todo => !todo.completed);\n\n      default:\n        return todos;\n    }\n  };\n\n  const selectTodo = (todo: Todo | 0) => {\n    if (todo !== 0) {\n      setSelectedId(todo.id);\n      setSelectedTodo(todo);\n      loadUser(todo.id);\n      setModalLoader(true);\n    }\n  };\n\n  const addSearch = (searchWord: string) => {\n    setSearchQuery(searchWord);\n  };\n\n  const clearSearch = () => {\n    setSearchQuery('');\n  };\n\n  const closeModal = () => {\n    setSelectedId(0);\n    setSelectedTodo(0);\n    loadUser(0);\n  };\n\n  const onSearch = (searchTerm: string) => {\n    const todosForSearch = onSort(todoSortByData);\n    const lowerQuery = searchTerm.trim().toLocaleLowerCase();\n\n    if (!lowerQuery) {\n      return todosForSearch;\n    }\n\n    return todosForSearch.filter(todo => todo.title\n      .toLowerCase()\n      .includes(lowerQuery));\n  };\n\n  const todoSortedData = onSearch(searchQuery);\n\n  useEffect(() => {\n    setListLoader(true);\n    loadTodoList();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectSortBy={selectSortBy}\n                searchQuery={searchQuery}\n                addSearch={addSearch}\n                clearSearch={clearSearch}\n              />\n            </div>\n\n            <div className=\"block\">\n              {listLoader\n                ? (\n                  <Loader />\n                )\n                : (\n                  <TodoList\n                    todoList={todoSortedData}\n                    selectedId={selectedId}\n                    selectTodo={selectTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {(selectedTodo !== 0 && user !== 0) && (\n        <TodoModal\n          todo={selectedTodo}\n          user={user}\n          closeModal={closeModal}\n          modalLoader={modalLoader}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}